using System.Collections;
using UnityEngine;
using UnityEngine.UI;

using UnityEngine.Networking;
using System.Text.RegularExpressions;
using System;



[System.Serializable]

public class NewBehaviourScript : MonoBehaviour
{
    public Button button,buttonc,buttonf;
    public Text cel;
    public Text hum;
    public Text far;

  
    void Update()
    {
        StartCoroutine(GetText());
    }

    IEnumerator GetText()
    {


        string url = "https://api.thinger.io/v2/users/Dheeraj333/devices/ESP8266/dht11";
        string authorization = "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJkZXYiOiJFU1A4MjY2IiwiaWF0IjoxNTUzNzgwODQwLCJqdGkiOiI1YzljZDA2ODI3ZTQyZjg3YWUxYzYyNTUiLCJ1c3IiOiJEaGVlcmFqMzMzIn0._qEcNGnnJxIIULqyeYevEwJXEdHCoP1STsyAym48Q6c";
        UnityWebRequest www = UnityWebRequest.Get(url);
        {
            www.SetRequestHeader("AUTHORIZATION", authorization);
            yield return www.SendWebRequest();



            if (www.isNetworkError || www.isHttpError)
            {
                Debug.Log(www.error);
            }
            else
            {

                
                Char delimiter = '"';
                string result = www.downloadHandler.text;
                Debug.Log(result);
                String[] substrings = result.Split(delimiter);
                
                if (substrings[4].Contains(","))
                {
                    String[] Substrings1 = substrings[4].Split(',');
                 
                    substrings[4] = Substrings1[0];
                    
                }
                if (substrings[6].Contains(","))
                {
                    String[] Substrings12 = substrings[6].Split(',');
                 
                    substrings[6] = Substrings12[0];
                  
                }
                if (substrings[8].Contains("}}"))
                {
                    String[] Substrings13 = substrings[8].Split('}');
                  
                    substrings[8] = Substrings13[0];
                   
                }
                string s1 = substrings[5];
                string s2 = s1 + substrings[6];
                
                cel.text = s2.ToString();
                string s3 = substrings[3];
                string s4 = s3 + substrings[4];
              
                hum.text = s4.ToString();
                string s5 = substrings[7];
                string s6 = s5 + substrings[8];
                
                far.text = s6.ToString();

               
                if (s4.Contains(":20") || s4.Contains(":21") || s4.Contains(":22") || s4.Contains(":23") || s4.Contains(":24") || s4.Contains(":25") || s4.Contains(":26") || s4.Contains(":27") || s4.Contains(":28") || s4.Contains(":29") || s4.Contains(":30")||s4.Contains(":31")||s4.Contains(":32"))
                {
                    TurnGreen();
                }
                else
                    TurnRed();

                if (s2.Contains(":24")||s2.Contains(":25")||s2.Contains(":26")||s2.Contains(":27")||s2.Contains(":28")||s2.Contains(":29")||s2.Contains(":30")|| s2.Contains(":31")||s2.Contains(":32")||s2.Contains(":33")||s2.Contains(":34"))
                {
                    TurnGreenc();
                    TurnGreenf();
                }
                else
                {
                    TurnRedc();
                    TurnRedf();
                }
                void TurnGreenc()
                {
                    ColorBlock colors = buttonc.colors;
                    colors.normalColor = Color.green;
                    colors.highlightedColor = new Color32(0, 246, 0, 255);
                    buttonc.colors = colors;
                }

                void TurnRedc()
                {
                    ColorBlock colors = buttonc.colors;
                    colors.normalColor = Color.red;
                    colors.highlightedColor = new Color32(255, 100, 100, 255);
                    buttonc.colors = colors;
                }

                void TurnGreenf()
                {
                    ColorBlock colors = buttonf.colors;
                    colors.normalColor = Color.green;
                    colors.highlightedColor = new Color32(0, 246, 0, 255);
                    buttonf.colors = colors;
                }

                void TurnRedf()
                {
                    ColorBlock colors = buttonf.colors;
                    colors.normalColor = Color.red;
                    colors.highlightedColor = new Color32(255, 100, 100, 255);
                    buttonf.colors = colors;
                }

                void TurnGreen()
                {
                    ColorBlock colors = button.colors;
                    colors.normalColor = Color.green;
                    colors.highlightedColor = new Color32(0, 246, 0, 255);
                    button.colors = colors;
                }

                void TurnRed()
                {
                    ColorBlock colors = button.colors;
                    colors.normalColor = Color.red;
                    colors.highlightedColor = new Color32(255, 100, 100, 255);
                    button.colors = colors;
                }
            }

        }
    }
}

